@page "/proveedor"
@inject IHttpServicio http
@inject SweetAlertService swal
@inject IJSRuntime JS

<div class="card shadow-sm border-0">
    <div class="card-body">
        <!-- Encabezado -->
        <div class="d-flex justify-content-between align-items-center mb-3">
            <h4 class="fw-bold mb-0">Proveedores</h4>
            <a class="btn btn-primary d-flex align-items-center" href="/proveedor/crear">
                <i class="bi bi-plus-lg me-2"></i> Nuevo Proveedor
            </a>
        </div>

        <!-- Tabla -->
        <table class="table align-middle table-hover">
            <thead class="table-light">
                <tr>
                    <th>Nombre</th>
                    <th>Dirección</th>
                    <th>Teléfono</th>
                    <th>Email</th>
                    <th class="text-center">Acciones</th>
                </tr>
            </thead>
            <tbody>
                @if (listaProveedor == null)
                {
                    <tr><td colspan="5" class="text-center text-muted">Cargando proveedores...</td></tr>
                }
                else if (!listaProveedor.Any())
                {
                    <tr><td colspan="5" class="text-center text-muted">No se encontraron proveedores.</td></tr>
                }
                else
                {
                    @foreach (var item in listaProveedor)
                    {
                        <tr>
                            <td class="fw-semibold">@item.Nombre</td>
                            <td>@item.Direccion</td>
                            <td>@item.Telefono</td>
                            <td>
                                @if (string.IsNullOrWhiteSpace(item.Correo))
                                {
                                    <span class="text-muted">-</span>
                                }
                                else
                                {
                                    <a href="mailto:@item.Correo" class="text-decoration-none">@item.Correo</a>
                                }
                            </td>
                            <td class="text-center">
                                <a class="btn btn-sm btn-outline-primary me-2" href="/proveedor/editar/@item.Id">
                                    <i class="bi bi-pencil"></i>
                                </a>
                                <button class="btn btn-sm btn-outline-danger" @onclick="() => EliminarProveedor(item.Id, item.Nombre)">
                                    <i class="bi bi-trash"></i>
                                </button>
                            </td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    </div>
</div>


@code {
    List<Proveedor> listaProveedor = new List<Proveedor>();
    string Mensaje = "";

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await Leer();
    }

    private async Task Leer()
    {
        var resp = await http.Get<List<Proveedor>>("api/Proveedor");

        if (!resp.Error)
        {
            listaProveedor = resp.Respuesta;
        }
        else
        {
            Mensaje = "Error";
        }

    }


    private async Task<bool> Confirmar(string nombre)
    {
        var result = await swal.FireAsync(new SweetAlertOptions
        {
            Title = "¿Eliminar proveedor?",
            Html = $"<p style='margin:0;'>Esta acción no se puede deshacer.<br>El proveedor <strong>“{nombre}”</strong> será eliminado permanentemente.</p>",
            Icon = SweetAlertIcon.Error,
            ShowCancelButton = true,
            ConfirmButtonText = "Eliminar",
            CancelButtonText = "Cancelar",

            // Colores personalizados
            Background = "#ffffff",             // fondo blanco
            Color = "#212529",                  // texto gris oscuro

            // Botones personalizados
            ConfirmButtonColor = "#dc3545",     // rojo (como Bootstrap 'danger')
            CancelButtonColor = "#ccc",      // gris claro (como Bootstrap 'light')

            // Opcional: desactiva estilos por defecto para que tomen bien los colores
            ButtonsStyling = true
        });

        return result.IsConfirmed;
    }
    private async Task EliminarProveedor(int id, string nombre)
    {
        var confirmado = await Confirmar(nombre);
        if (confirmado)
        {
            await http.Delete($"api/Proveedor/{id}");
            await Leer();
        }

    }


}
