@page "/productos"
@inject IHttpServicio http
@inject SweetAlertService swal
@inject IJSRuntime JS

<div class="d-flex justify-content-between align-items-center mb-3">
    <h3 class="fw-bold m-0">Gestión de Productos</h3>
    <a class="btn btn-primary" href="/productos/crear">
        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-plus" viewBox="0 0 16 16">
            <path d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4" />
        </svg> Nuevo producto
    </a>
</div>
<table class="table table-hover">
    <thead>
        <tr>
            <th>ID</th>
            <th>Nombre</th>
            <th>Presentación</th>
            <th>Precio</th>
            <th>Estado</th>
            <th>Acciones</th>
        </tr>
    </thead>
    <tbody>

        @if (listaProductos == null)
        {
            <p>Buscando productos ...</p>
        }
        else if(listaProductos.Count == 0)
        {
            <p>No se encontraron productos cargados.</p>            
        }
        @foreach (var item in listaProductos)
        {
            <tr>
                <td>@item.Id</td>
                <td>@item.Nombre</td>
                <td>@item.Presentacion</td>
                <td>@item.Precio</td>
                <td>
                    @if (item.Estado)
                    {
                        <span class="text-success fw-bold">Activo</span>
                    }
                    else
                    {
                        <span class="text-danger fw-bold">Inactivo</span>
                    }
                </td>
                <td>
                    <a class="btn btn-primary" href="/productos/editar/@item.Id">
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-pencil-square" viewBox="0 0 16 16">
                            <path d="M15.502 1.94a.5.5 0 0 1 0 .706L14.459 3.69l-2-2L13.502.646a.5.5 0 0 1 .707 0l1.293 1.293zm-1.75 2.456-2-2L4.939 9.21a.5.5 0 0 0-.121.196l-.805 2.414a.25.25 0 0 0 .316.316l2.414-.805a.5.5 0 0 0 .196-.12l6.813-6.814z" />
                            <path fill-rule="evenodd" d="M1 13.5A1.5 1.5 0 0 0 2.5 15h11a1.5 1.5 0 0 0 1.5-1.5v-6a.5.5 0 0 0-1 0v6a.5.5 0 0 1-.5.5h-11a.5.5 0 0 1-.5-.5v-11a.5.5 0 0 1 .5-.5H9a.5.5 0 0 0 0-1H2.5A1.5 1.5 0 0 0 1 2.5z" />
                        </svg>
                    </a>
                    <button class="btn btn-danger" @onclick="() => EliminarProducto(item.Id, item.Nombre)">
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-trash" viewBox="0 0 16 16">
                            <path d="M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5m2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5m3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0z" />
                            <path d="M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1zM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4zM2.5 3h11V2h-11z" />
                        </svg>
                    </button>
                    <button class="btn btn-secondary">
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-arrow-down-square" viewBox="0 0 16 16">
                            <path fill-rule="evenodd" d="M15 2a1 1 0 0 0-1-1H2a1 1 0 0 0-1 1v12a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1zM0 2a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2zm8.5 2.5a.5.5 0 0 0-1 0v5.793L5.354 8.146a.5.5 0 1 0-.708.708l3 3a.5.5 0 0 0 .708 0l3-3a.5.5 0 0 0-.708-.708L8.5 10.293z" />
                        </svg>
                    </button>
                </td>
            </tr>
        }

    </tbody>

</table>



@code {
    List<Producto> listaProductos = new List<Producto>();
    string Mensaje = "";

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await Leer();
    }

    private async Task Leer()
    {
        var resp = await http.Get<List<Producto>>("api/Productos");

        if (!resp.Error)
        {
            listaProductos = resp.Respuesta;
        }
        else
        {
            Mensaje = "Error";
        }

    }


    private async Task<bool> Confirmar(string nombre)
    {
        var result = await swal.FireAsync(new SweetAlertOptions
        {
            Title = "¿Eliminar producto?",
            Html = $"<p style='margin:0;'>Esta acción no se puede deshacer.<br>El producto <strong>“{nombre}”</strong> será eliminado permanentemente.</p>",
            Icon = SweetAlertIcon.Error,
            ShowCancelButton = true,
            ConfirmButtonText = "Eliminar",
            CancelButtonText = "Cancelar",

            // Colores personalizados
            Background = "#ffffff",             // fondo blanco
            Color = "#212529",                  // texto gris oscuro

            // Botones personalizados
            ConfirmButtonColor = "#dc3545",     // rojo (como Bootstrap 'danger')
            CancelButtonColor = "#ccc",      // gris claro (como Bootstrap 'light')

            // Opcional: desactiva estilos por defecto para que tomen bien los colores
            ButtonsStyling = true
        });

        return result.IsConfirmed;
    }
    private async Task EliminarProducto(int id, string nombre)
    {
        var confirmado = await Confirmar(nombre);
        if (confirmado)
        {
            await http.Delete($"api/Productos/{id}");
            await Leer();
        }

    }


}
