@page "/mantenimientos"  
@inject IHttpServicio http  
@inject SweetAlertService swal  
@inject IJSRuntime JS  

<div class="d-flex justify-content-between align-items-center mb-3">  
    <h3 class="fw-bold m-0">Gestión de Mantenimientos</h3>  
    <a class="btn btn-primary" href="/mantenimientos/crear">  
        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-plus" viewBox="0 0 16 16">  
            <path d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4" />  
        </svg> Nuevo mantenimiento  
    </a>  
</div>  

@if (listaMantenimientos == null)  
{  
    <p>Buscando mantenimientos ...</p>  
}  
else if (listaMantenimientos.Count == 0)  
{  
    <p>No se encontraron mantenimientos cargados.</p>  
}  
else  
{  
    <div class="row">  
        @foreach (var item in listaMantenimientos)  
        {  
            <div class="col-md-4 mb-4">  
                <div class="card h-100 shadow-sm">  
                    <div class="card-body">  
                        <div class="d-flex justify-content-between">  
                            <h5 class="card-title fw-bold">@item.Nombre</h5>  
                            @if (item.Estado == false)  
                            {  
                                <span class="badge bg-danger">Vencido</span>  
                            }  
                            else if (item.Estado == true)  
                            {  
                                <span class="badge bg-success">Al día</span>  
                            }  
                        </div>  

                        <p class="card-text text-muted">@item.Descripcion</p>  

                        <ul class="list-unstyled small mb-3">  
                            <li><strong>Frecuencia:</strong> Cada @item.Frecuencia días</li>  
                            <li><strong>Estado:</strong> @(item.Estado ? "Al dia" : "Vencido")</li>  
                            <li><strong>Insumo:</strong> @(item.Insumo ? "Sí" : "No")</li>  
                        </ul>  

                        <div class="d-flex justify-content-between">  
                            <a class="btn btn-sm btn-outline-primary" href="/mantenimientos/editar/@item.Id">  
                                Editar  
                            </a>  
                            <button class="btn btn-sm btn-outline-danger" @onclick="() => EliminarMantenimiento(item.Id, item.Nombre)">  
                                Eliminar  
                            </button>  
                        </div>  
                    </div>  
                </div>  
            </div>  
        }  
    </div>  
}  

@code {  
    List<Mantenimiento> listaMantenimientos = new List<Mantenimiento>();  
    string Mensaje = "";  

    protected override async Task OnInitializedAsync()  
    {  
        await base.OnInitializedAsync();  
        await Leer();  
    }  

    private async Task Leer()  
    {  
        var resp = await http.Get<List<Mantenimiento>>("api/Mantenimiento");  

        if (!resp.Error)  
        {  
            listaMantenimientos = resp.Respuesta;  
        }  
        else  
        {  
            Mensaje = "Error";  
        }  
    }  

    private async Task<bool> Confirmar(string nombre)  
    {  
        var result = await swal.FireAsync(new SweetAlertOptions  
        {  
            Title = "¿Eliminar mantenimiento?",  
            Html = $"<p style='margin:0;'>Esta acción no se puede deshacer.<br>El mantenimiento <strong>“{nombre}”</strong> será eliminado permanentemente.</p>",  
            Icon = SweetAlertIcon.Error,  
            ShowCancelButton = true,  
            ConfirmButtonText = "Eliminar",  
            CancelButtonText = "Cancelar",  

            // Colores personalizados  
            Background = "#ffffff",             // fondo blanco  
            Color = "#212529",                  // texto gris oscuro  

            // Botones personalizados  
            ConfirmButtonColor = "#dc3545",     // rojo (como Bootstrap 'danger')  
            CancelButtonColor = "#ccc",      // gris claro (como Bootstrap 'light')  

            // Opcional: desactiva estilos por defecto para que tomen bien los colores  
            ButtonsStyling = true  
        });  

        return result.IsConfirmed;  
    }  
    private async Task EliminarMantenimiento(int id, string nombre)  
    {  
        var confirmado = await Confirmar(nombre);  
        if (confirmado)  
        {  
            await http.Delete($"api/Mantenimiento/{id}");  
            await Leer();  
        }  
    }  
}